# 다이나믹프로그래밍(DP)
# 1) 탑다운 2) 보텀업 
# 사용 조건 : 1) 큰 문제를 작은 문제로 나눌 수 있다. 2) 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
# 메모이제이션 기법(캐싱) : dp 구현 방법 중 하나. 한 번 구한 결과를 메모해두고 같은 식이 다시 호출되며, 메모한 결과를 그대로 가져오는 것

# 예시 : 피보나치 수열
# 1) 탑다운 - 재귀 (w 메모이제이션)
dp = [0]*100

def fibo(x):
    # 종료 조건
    if x==1 or x==2:
        return 1
    # 이미 계산한 적이 있다면
    if dp[x] != 0:
        return dp[x]
    dp[x] = fibo(x-1)+fibo(x-2)
    return dp[x]
    
# 2) 바텀업 - 반복문
dp = [0]*100
dp[1] = 1
dp[2] = 2
n=99

for i in range(3,n+1):
    dp[i] = dp[i-1]+dp[i-2]
print(dp[n])