# https://www.acmicpc.net/problem/1021

# N개의 원소를 포함하고 있는 양방향 순환 큐
# 1번 : 원소를 뽑아낼 때는, 첫 번째 원소를 뽑아낸다. (해당 큐가 사라진다)
# 2번 : 왼쪽으로 한 칸 이동시킨다.(큐의 맨 뒤로 간다) 
# 3번 : 오른쪽으로 한 칸 이동시킨다.(맨 뒤 원소가 맨 앞으로 온다)

N,M = map(int,input().split()) # 전체 크기, 뽑아내려는 수의 개수

# 그 원소를 주어진 순서대로 뽑아내는데 드는 2번, 3번 연산의 최솟값

place = list(map(int,input().split())) # 뽑고 싶은 원소 위치
numbers = [ _ for _ in range(1,N+1) ] # 원소 리스트
ans = 0 # 2,3번 원소 개수

for i in range(M):
    idx = numbers.index(place[i]) # 대상 원소 인덱스
    front = idx # 왼쪽으로 이동할 때, 이동 횟수
    back = N-idx # 오른쪽으로 이동할 때, 이동 횟수
    
    temp1 = numbers[:idx] # 앞에 큐
    temp2 = numbers[idx:] # 뒤에 큐
    
    numbers = temp2+temp1
    
    if(front<back): # 왼쪽으로 이동
        ans += front
    else: # 오른쪽으로 이동
        ans += back
    del numbers[0] # 원소 제거
    N-=1
    
print(ans)

# 1) 원소 위치를 어떻게 계산할 것인지
# 2) 이동 계산 방법 
# - 앞에 있는 원소 개수랑 뒤에 있는 원소 개수 비교
# - 더 적은 원소 개수 쪽으로 이동 : 앞이 더 적으면 개수만큼 왼쪽으로, 뒤가 더 적으면 (개수+1)만큼 오른쪽으로
# - 두 수가 같다면 ? : 어떻게 이동하든 상관x. 수의 순서는 동일하기 때문
# 3) 해당 큐 제거 
# 4) 이동 값 합 출력

## 풀이 
# 처음 : 1 "2" 3 4 "5" 6 7 8 "9" 10
# N = 10, idx = 1
# 2를 뽑으려면 왼쪽으로 1번이동
# 2 3 4 5 6 7 8 9 10 1
# 원소 뽑기

# 9를 뽑으로면 오른쪽으로 3번 이동
# 처음 : 3 4 5 6 7 8 9 10 1
# N = 9, idx = 6
# 1 3 4 5 6 7 8 9 10 
# 10 1 3 4 5 6 7 8 9
# 9 10 1 3 4 5 6 7 8
# 원소 뽑기

# 5를 뽑으려면 오른쪽으로 4번 이동
# 처음 : 10 1 3 4 5 6 7 8
# N = 8, idx = 4
# 8 10 1 3 4 5 6 7
# 7 8 10 1 3 4 5 6
# 6 7 8 10 1 3 4 5
# 5 6 7 8 10 1 3 4
# 원소 뽑기
